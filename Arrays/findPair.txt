/**
 * @param {number[]} nums
 * @param {number} target
 * @return {number[]}
 */
var twoSum = function(nums, target) {
    for(let i=0;i<nums.length;i++){
        let numberToFind = target-nums[i];
        for(let j=i+1;j< nums.length;j++){
            if(nums[j]===numberToFind)
                return [i,j]
        }
    }
    return null;
};


timecomplexity:O(n^2)
spacecomplexity:O(1)


optimized solution:

var twoSum = function(nums, target) {
    const numsMap={};
    for(let p=0;p<nums.length;p++){
        const currentMapValue=numsMap[nums[p]];
        if(currentMapValue>=0){
            return [currentMapValue,p];
        }
        else{
            const numberOfFind=target-nums[p];
            numsMap[numberOfFind]=p;
        }
        
    }
    return null;
};