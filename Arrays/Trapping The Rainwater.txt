var trap = function(height) {
    let trapWater=0;
    for(let p=0;p<height.length;p++){
      let  leftP=p,rightP=p,maxLeft=0,maxRight=0;
      while(leftP>=0){
        maxLeft=Math.max(maxLeft,height[leftP]);
        leftP--;
      }
      while(rightP<height.length){
        maxRight=Math.max(maxRight,height[rightP]);
        rightP++;
      }
      const currentWater=Math.min(maxLeft,maxRight)-height[p];
      if(currentWater>=0){
        trapWater+=currentWater;
      }      


    }
    return trapWater;
};


Timecomplexity : O(n^2)
Spacecomplexity : O(1)


var trap = function(height) {
    let left = 0, right = height.length - 1, totalWater = 0, maxLeft = 0, maxRight = 0;
  
  while(left < right) {
    if(height[left] <= height[right]) {
      if(height[left] >= maxLeft) { 
        maxLeft = height[left]
      } else { 
        totalWater += maxLeft - height[left];
      }
      left++;
    } else {
      if(height[right] >= maxRight) {
          maxRight = height[right];
      } else {
          totalWater += maxRight - height[right];
      }
        
      right--;
    }
  }

  return totalWater;
};


Timecomplexity:O(n);
Spacecomplexity:O(1);