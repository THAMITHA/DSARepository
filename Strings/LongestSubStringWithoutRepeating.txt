var lengthOfLongestSubstring = function(s) {
    let longest=0;
    for(let left=0;left<s.length;left++){
        let currentLength=0,seenChar={};
        for(let right=left;right<s.length;right++){
            const currentChar=s[right];
            if(!seenChar[currentChar]){
                currentLength++;
                seenChar[currentChar]=true;
                longest=Math.max(longest,currentLength);
            }
            else{
                break;
            }
        }
    }
    return longest;
};

TimeComplexity:O(n^2);
SpaceComplexity:O(n);




var lengthOfLongestSubstring = function(s) {
    let left=0,seenChar={},longest=0;
    if(s.length<=1)return s.length;
    for(let right=0;right<s.length;right++){
        const currentChar=s[right];
        const prevSeen=seenChar[currentChar];
        if(prevSeen>=left){
            left=prevSeen+1;
        }
        seenChar[currentChar]=right;
        longest=Math.max(longest,right-left+1);
    }
    return longest;
};

TimeComplexity:O(n);
SpaceComplexity:O(n);
