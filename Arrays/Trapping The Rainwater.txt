var trap = function(height) {
    let trapWater=0;
    for(let p=0;p<height.length;p++){
      let  leftP=p,rightP=p,maxLeft=0,maxRight=0;
      while(leftP>=0){
        maxLeft=Math.max(maxLeft,height[leftP]);
        leftP--;
      }
      while(rightP<height.length){
        maxRight=Math.max(maxRight,height[rightP]);
        rightP++;
      }
      const currentWater=Math.min(maxLeft,maxRight)-height[p];
      if(currentWater>=0){
        trapWater+=currentWater;
      }      


    }
    return trapWater;
};


Timecomplexity : O(n^2)
Spacecomplexity : O(1)


var maxArea = function(height) {
 let p1=0,p2=height.length-1,fArea=0;
    while(p1<p2){
        const heights=Math.min(height[p1],height[p2]);
        const width=p2-p1;
        const area=width*heights;
        fArea=Math.max(fArea,area);
        if(height[p1]<=height[p2]){
            p1++;
        }
        else{
            p2--;
        }
    }
   return fArea;
};


Time complexity:O(n)
Space complexity:O(1)