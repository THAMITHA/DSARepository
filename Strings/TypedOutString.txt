const buildString = function(string) {
    const builtString = [];
    for(let p = 0; p < string.length; p++) {
        if(string[p] !== '#') {
            builtString.push(string[p]);
        } else {
            builtString.pop();
        }
    }
    
    return builtString;
}

var backspaceCompare = function(s, t) {
    const finalS=buildString(s);
    const finalT=buildString(t);

    if(finalS.length!==finalT.length){
        return false;
    }
    else{
        for(let p=0;p<finalS.length;p++){
            if(finalS[p]!==finalT[p]){
                return false;
            }
        }
    }
    return true;
};



Time Complexity:O(a+b);
Space Complexity:O(a+b);


/**
 * @param {string} s
 * @param {string} t
 * @return {boolean}
 */
var backspaceCompare = function(s, t) {
    let p1=s.length-1,p2=t.length-1;
    while(p1>=0 || p2>=0){
        if(s[p1]==="#" || t[p2]==="#"){
            if(s[p1]==='#'){
                let backCount=2;
                while(backCount>0){
                    p1--;
                    backCount--;

                    if(s[p1]==="#"){
                        backCount+=2;
                    }
                }

            }
            if(t[p2]==='#'){
                let backCount=2;
                while(backCount>0){
                    p2--;
                    backCount--;
                    if(t[p2]==="#"){
                        backCount+=2;
                    }
                }
            }        
        }
        else{
            if(s[p1]!=t[p2]){
                return false;
            }
            else{
                p1--;
                p2--;
            }
        }
        
    }
    return true;
};



Time Complexity:O(a+b)
Space Complexity:O(1)
